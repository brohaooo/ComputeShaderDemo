#include "/Engine/Public/Platform.ush"

// This time, we hardcode the thread group size to 8x8
#define THREADS_X 8
#define THREADS_Y 8

// input texture as read-only resource
Texture2D<float4> InputTexture : register(t0);

// output texture as read-write resource
RWTexture2D<float4> OutputTexture : register(u0);

// define a sampler state, used for texture sampling
SamplerState MySamplerState;


// a simple box convolution shader
[numthreads(THREADS_X, THREADS_Y, 1)]
void MainCS(uint3 ThreadID : SV_DispatchThreadID)
{
    // we can directly get the dimensions of the input texture
    uint width, height;
    InputTexture.GetDimensions(width, height);
    
    if (ThreadID.x >= width || ThreadID.y >= height)
    {
        return;
    }
    

    float2 uv = (float2(ThreadID.xy) + 0.5) / float2(width, height); // half pixel offset is needed for correct sampling

    float4 sum = float4(0, 0, 0, 0);
    int count = 0;

    // iterate over a 3x3 kernel
    for (int x = -1; x <= 1; x++)
    {
        for (int y = -1; y <= 1; y++)
        {
            float2 offset = float2(x, y) / float2(width, height);
            float2 sampleCoord = uv + offset;
            sum += InputTexture.Sample(MySamplerState, sampleCoord);
            count++;
        }
    }

    // calculate the average and write it to the output texture
    OutputTexture[ThreadID.xy] = sum / count;
    //OutputTexture[ThreadID.xy] = float4(1, 0, 0, 1);
}